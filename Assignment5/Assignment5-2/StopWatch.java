//*******************************************************************
// StopWatch.java            
//
// Anton Nikitenko T00622037
// COMP 1231 Assignment 5 Part 2
// StopWatch class defines a set of Swing and AWT GUI components to 
// display a window with components that allow the user to start, stop, 
// reset, and the view the current state of the stopwatch. A single 
// ActionListener is implemented into the application and controlls one 
// of the tasks based on which button the user pressed
//*******************************************************************

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.Timer;
import java.util.TimerTask;
import java.text.DecimalFormat;

public class StopWatch extends JFrame implements ActionListener {
	// Label to display the timer's time in seconds
	private JTextField timerSecDisplay;
	private JLabel timerSecLabel;
	private JPanel timerPanel, buttonPanel;
	// Buttons to allow the user to start, stop and reset the stopwatch
	private JButton buttonStart, buttonStop, buttonReset;
	// Variables to store the time at which the stopwatch was started, and 
	// the current time
	private Timer timer;
	private double seconds = 0;
	// Output format used to display the timer in seconds
	private DecimalFormat df = new DecimalFormat(".#");
	
	public StopWatch()
	{
		setLayout(new BoxLayout(getContentPane(), BoxLayout.PAGE_AXIS));
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		// Set the label time at startup at 0 seconds
		timerPanel = new JPanel();
		
		timerSecDisplay = new JTextField("0", 5);
		timerSecDisplay.setEditable(false);
		timerPanel.add(timerSecDisplay);
		timerSecLabel = new JLabel("sec");
		timerPanel.add(timerSecLabel);
		
		// Start button with listener attached for user interaction
		buttonPanel = new JPanel();
		buttonStart = new JButton("Start");
		buttonStart.setMnemonic('s');
		buttonStart.addActionListener(this);
		buttonPanel.add(buttonStart);
		
		// Stop button with listener attached for user interaction
		buttonStop = new JButton("Stop");
		buttonStop.setMnemonic('p');
		buttonStop.addActionListener(this);
		buttonPanel.add(buttonStop);
		
		// Reset button with listener attached for user interaction
		buttonReset = new JButton("Reset");
		buttonReset.setMnemonic('r');
		buttonReset.addActionListener(this);
		buttonPanel.add(buttonReset);
		
		add(timerPanel);
		add(buttonPanel);
		
		setTitle("Stopwatch Application");
		setSize(300, 150);
		setVisible(true);
	}
	
	private void startStopwatch()
	{
		// If a timer is already running, re-initialize the timer object
		// so that only one timer runs at the same time
		try
		{
			timer.cancel();
		}catch(NullPointerException e)
		{
			// If no timer exists, continue executing the rest of the method
		}
		
		
		timer = new Timer();
		TimerTask taskRun = new TimerTask() 
		{
			public void run()
			{
				// update the timer display at every update
				seconds+=0.10;
				timerSecDisplay.setText(df.format(seconds));
			}
		};
		// Schedule thetimer to update every 100ms
		timer.schedule(taskRun, 0, 100);		
	}
	
	private void stopStopWatch()
	{
		// Cancel the timer thread used for the current timer,
		// stopping the time from incrementing
		timer.cancel();
	}
	
	private void resetStopWatch()
	{
		// Set timer output to 0 seconds
		seconds = 0.0;
		timerSecDisplay.setText(df.format(seconds));
	}
	
	
	public void actionPerformed(ActionEvent e)
	{
		// Compares the ActionEvent generated by the parent class, and compares
		// it to the objects associated with the listener. Executes the codes 
		// corresponding to the button the user pressed
		if(e.getSource() == buttonStart)
		{
			this.startStopwatch();
		}else if(e.getSource() == buttonStop)
		{
			this.stopStopWatch();
		}else if(e.getSource() == buttonReset)
		{
			this.resetStopWatch();
		}
	}

}
